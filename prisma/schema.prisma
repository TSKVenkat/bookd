generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(cuid())
  email            String            @unique
  name             String
  hashedPassword   String
  role             String            @default("user")
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  resetToken       String?
  resetTokenExpiry DateTime?
  AdminAuditLog    AdminAuditLog[]
  approvalHistory  ApprovalHistory[] @relation("AdminApprovals")
  Booking          Booking[]
  organizer        Organizer?
  Payment          Payment[]
  sessions         Session[]
}

model Session {
  id        String   @id
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Event {
  id          String       @id @default(cuid())
  name        String
  description String
  date        DateTime
  endDate     DateTime?
  venueId     String
  artistId    String
  organizerId String
  thumbnail   String?
  status      String       @default("DRAFT") // DRAFT, PUBLISHED, CANCELLED, COMPLETED
  hasSeatMap  Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  bookings    Booking[]
  artist      Artist       @relation(fields: [artistId], references: [id])
  organizer   Organizer    @relation(fields: [organizerId], references: [id])
  venue       Venue        @relation(fields: [venueId], references: [id])
  seatMap     SeatMap?
  ticketTypes TicketType[]
  tickets     Ticket[]
}

model Venue {
  id          String   @id @default(cuid())
  name        String
  address     String
  city        String
  state       String
  country     String
  capacity    Int
  description String?
  thumbnail   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  latitude    Float?
  longitude   Float?
  pinCode     String
  organizerId String
  events      Event[]
}

model Artist {
  id          String   @id @default(cuid())
  name        String
  description String?
  genre       String?
  thumbnail   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  events      Event[]
}

model Seat {
  id         String     @id @default(cuid())
  seatMapId  String
  row        String
  number     String
  typeId     String
  x          Float
  y          Float
  rotation   Float?
  seatType   String     @default("regular") // regular, accessible, premium
  status     String     @default("available") // available, unavailable, reserved, sold
  lockExpiry DateTime?
  lockUserId String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  seatMap    SeatMap    @relation(fields: [seatMapId], references: [id], onDelete: Cascade)
  ticketType TicketType @relation(fields: [typeId], references: [id])
  tickets    Ticket[]

  @@unique([seatMapId, row, number])
}

model TicketType {
  id          String   @id @default(cuid())
  eventId     String
  name        String
  description String?
  price       Decimal
  capacity    Int?
  color       String   @default("#4CAF50")
  isPublic    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  seats       Seat[]
  event       Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  tickets     Ticket[]
}

model Booking {
  id          String   @id @default(cuid())
  userId      String
  eventId     String
  totalAmount Float
  status      String   @default("PENDING")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  ticketCount Int
  event       Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  payment     Payment?
  tickets     Ticket[]
}

model Payout {
  id          String    @id @default(cuid())
  organizerId String
  amount      Float
  status      String    @default("PENDING")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  organizer   Organizer @relation(fields: [organizerId], references: [id], onDelete: Cascade)
}

model Payment {
  id               String           @id @default(cuid())
  bookingId        String           @unique
  userId           String
  paymentGatewayId String
  paymentMethod    String
  amount           Decimal
  currency         String           @default("INR")
  status           String
  transactionId    String?
  gatewayResponse  Json?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  OrganizePayout   OrganizePayout[]
  booking          Booking          @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  User             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Ticket {
  id         String     @id @default(cuid())
  bookingId  String
  seatId     String?
  typeId     String
  qrCode     String     @unique
  status     String     @default("PENDING") // PENDING, ISSUED, CANCELLED, CHECKED_IN
  expiryTime DateTime?
  scannedAt  DateTime?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  eventId    String
  booking    Booking    @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  event      Event      @relation(fields: [eventId], references: [id])
  seat       Seat?      @relation(fields: [seatId], references: [id])
  ticketType TicketType @relation(fields: [typeId], references: [id])
}

model Organizer {
  id              String              @id @default(cuid())
  userId          String              @unique
  businessName    String
  contactPerson   String
  email           String
  phone           String
  panNumber       String
  gstNumber       String
  aadhaarNumber   String
  status          OrganizerStatus     @default(PENDING)
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  address         String
  approvalHistory ApprovalHistory[]
  bankAccount     BankAccount?
  events          Event[]
  OrganizePayout  OrganizePayout[]
  user            User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  documents       OrganizerDocument[]
  payouts         Payout[]
}

model OrganizerDocument {
  id                 String             @id @default(cuid())
  organizerId        String
  documentType       DocumentType
  documentReference  String
  uploadedAt         DateTime           @default(now())
  expiryDate         DateTime?
  verificationStatus VerificationStatus @default(PENDING)
  organizer          Organizer          @relation(fields: [organizerId], references: [id], onDelete: Cascade)
}

model BankAccount {
  id                String    @id @default(cuid())
  organizerId       String    @unique
  accountNumber     String
  ifscCode          String
  accountHolderName String
  bankName          String
  branch            String?
  isVerified        Boolean   @default(false)
  razorpayContactId String?
  razorpayFundId    String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  organizer         Organizer @relation(fields: [organizerId], references: [id], onDelete: Cascade)
}

model ApprovalHistory {
  id             String          @id @default(cuid())
  organizerId    String
  adminId        String
  previousStatus OrganizerStatus
  newStatus      OrganizerStatus
  reason         String?
  createdAt      DateTime        @default(now())
  admin          User            @relation("AdminApprovals", fields: [adminId], references: [id])
  organizer      Organizer       @relation(fields: [organizerId], references: [id], onDelete: Cascade)
}

model AdminAuditLog {
  id           String   @id
  adminId      String
  action       String
  resourceType String
  resourceId   String
  details      String?
  createdAt    DateTime @default(now())
  User         User     @relation(fields: [adminId], references: [id])
}

model OrganizePayout {
  id               String    @id
  organizerId      String
  paymentId        String
  amount           Decimal
  currency         String    @default("INR")
  razorpayPayoutId String    @unique
  status           String
  platformFee      Decimal
  referenceId      String
  processedAt      DateTime?
  failureReason    String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime
  Organizer        Organizer @relation(fields: [organizerId], references: [id], onDelete: Cascade)
  Payment          Payment   @relation(fields: [paymentId], references: [id])
}

model SeatMap {
  id        String    @id @default(cuid())
  eventId   String    @unique
  event     Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  layout    String    @db.Text // JSON string of layout settings
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  seats     Seat[]
  sections  Section[]
}

model Section {
  id              String  @id
  seatMapId       String
  seatMap         SeatMap @relation(fields: [seatMapId], references: [id], onDelete: Cascade)
  name            String
  x               Float
  y               Float
  width           Float
  height          Float
  color           String
  rotation        Float   @default(0)
  rows            Int     @default(1)
  seatsPerRow     Int     @default(1)
  rowStartLabel   String  @default("A")
  seatStartNumber Int     @default(1)
  rowSpacing      Float   @default(30)
  seatSpacing     Float   @default(30)
  isArc           Boolean @default(false)
  arcData         String? @db.Text // JSON string of arc settings
  seats           Seat[]
}

model Seat {
  id           String    @id
  seatMapId    String
  seatMap      SeatMap   @relation(fields: [seatMapId], references: [id], onDelete: Cascade)
  sectionId    String?
  section      Section?  @relation(fields: [sectionId], references: [id], onDelete: SetNull)
  x            Float
  y            Float
  row          String    @default("")
  number       Int       @default(0)
  ticketTypeId String?
  ticketType   TicketType? @relation(fields: [ticketTypeId], references: [id])
  status       String    @default("available") // available, reserved, sold, disabled
  label        String    @default("")
  tickets      Ticket[]
}

enum OrganizerStatus {
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
}

enum DocumentType {
  PAN_CARD
  GST_CERTIFICATE
  AADHAAR_CARD
  BUSINESS_PROOF
  IDENTITY_PROOF
  BANK_STATEMENT
  OTHER
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}
